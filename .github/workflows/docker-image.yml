name: Docker Image CI

on:
  push:
    branches: [ feature/enhancements ]
jobs:

  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: docker login
        env:
          DOCKER_USER: ${{secrets.DOCKER_USER}}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
          GIT_HASH: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to Docker Hub so that it can
          # be deployed to ECS.
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
          docker pull nrgi/rc-subsite:${GITHUB_REF##*/} || echo 'Cache not available'
          docker build --cache-from nrgi/rc-subsite:${GITHUB_REF##*/} -t nrgi/rc-subsite:${GITHUB_REF##*/}.$GIT_HASH .
          docker tag nrgi/rc-subsite:${GITHUB_REF##*/}.$GIT_HASH nrgi/rc-subsite:${GITHUB_REF##*/}
          docker push nrgi/rc-subsite:${GITHUB_REF##*/}
          docker push nrgi/rc-subsite:${GITHUB_REF##*/}.$GIT_HASH
          echo "::set-output name=image::nrgi/rc-subsite:${GITHUB_REF##*/}.$GIT_HASH"
      - name: Add secrets to Task Definition
          run: echo "$ECS_TASK_DEFINITION" > task-definition.json
          env:
            ECS_TASK_DEFINITION: ${{secrets.ECS_TASK_DEFINITION}}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ secrets.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true